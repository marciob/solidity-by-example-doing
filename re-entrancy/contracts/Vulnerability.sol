// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

//simple contract deposit/withdraw contract to test a re-entrancy vulnerability
//this contract can be exploit by another contract

contract Vulnerability {
    mapping(address => uint) public balances;

    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw() public {
        //to the attack succeed, this function will be called multiple times before balances[msg.sender] been updated
        uint bal = balances[msg.sender];
        require(bal > 0);

        (bool sent, ) = msg.sender.call{value: bal}("");
        require(sent, "Failed to send Ether");

        balances[msg.sender] = 0;
    }

    // Helper function to check the balance of this contract
    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}
