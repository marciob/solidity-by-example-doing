// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract VulnerabilitySolved {
    bool internal locked; // the default value is false

    // add this modifier to prevent re-entrancy in certain functions
    modifier noReentrant() {
        // since that require statement requires to be true to succeed, it only will happen if locked is false
        // that's because require(!locked) means true, because !locked while the initial locked state is false will be true
        require(!locked, "No re-entrancy");
        locked = true;
        _;
        locked = false;
    }
}
